<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: device_session.proto

namespace Storage;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>storage.DeviceSessionPB</code>
 */
class DeviceSessionPB extends \Google\Protobuf\Internal\Message
{
    /**
     * ID of the device-profile.
     *
     * Generated from protobuf field <code>string device_profile_id = 1;</code>
     */
    private $device_profile_id = '';
    /**
     * ID of the service-profile.
     *
     * Generated from protobuf field <code>string service_profile_id = 2;</code>
     */
    private $service_profile_id = '';
    /**
     * ID of the routing-profile.
     *
     * Generated from protobuf field <code>string routing_profile_id = 3;</code>
     */
    private $routing_profile_id = '';
    /**
     * Device address.
     *
     * Generated from protobuf field <code>bytes dev_addr = 4;</code>
     */
    private $dev_addr = '';
    /**
     * Device EUI.
     *
     * Generated from protobuf field <code>bytes dev_eui = 5;</code>
     */
    private $dev_eui = '';
    /**
     * Join EUI.
     *
     * Generated from protobuf field <code>bytes join_eui = 6;</code>
     */
    private $join_eui = '';
    /**
     * FNwkSIntKey.
     *
     * Generated from protobuf field <code>bytes f_nwk_s_int_key = 7;</code>
     */
    private $f_nwk_s_int_key = '';
    /**
     * SNwkSIntKey.
     *
     * Generated from protobuf field <code>bytes s_nwk_s_int_key = 8;</code>
     */
    private $s_nwk_s_int_key = '';
    /**
     * NwkSEncKey.
     *
     * Generated from protobuf field <code>bytes nwk_s_enc_key = 9;</code>
     */
    private $nwk_s_enc_key = '';
    /**
     * AppSKeyEnvelope contains the (encrypted) AppSKey key-envelope.
     *
     * Generated from protobuf field <code>.common.KeyEnvelope app_s_key_envelope = 45;</code>
     */
    private $app_s_key_envelope = null;
    /**
     * Uplink frame-counter.
     *
     * Generated from protobuf field <code>uint32 f_cnt_up = 10;</code>
     */
    private $f_cnt_up = 0;
    /**
     * Downlink frame-counter (network-server).
     *
     * Generated from protobuf field <code>uint32 n_f_cnt_down = 11;</code>
     */
    private $n_f_cnt_down = 0;
    /**
     * Uplink frame-counter (application-server).
     * Note: this frame-counter is managed by the application-server.
     *
     * Generated from protobuf field <code>uint32 a_f_cnt_down = 12;</code>
     */
    private $a_f_cnt_down = 0;
    /**
     * Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or a_f_cnt_down).
     *
     * Generated from protobuf field <code>uint32 conf_f_cnt = 39;</code>
     */
    private $conf_f_cnt = 0;
    /**
     * Skip uplink frame-counter validation.
     *
     * Generated from protobuf field <code>bool skip_f_cnt_check = 13;</code>
     */
    private $skip_f_cnt_check = false;
    /**
     * RX Delay.
     *
     * Generated from protobuf field <code>uint32 rx_delay = 14;</code>
     */
    private $rx_delay = 0;
    /**
     * RX1 data-rate offset.
     *
     * Generated from protobuf field <code>uint32 rx1_dr_offset = 15;</code>
     */
    private $rx1_dr_offset = 0;
    /**
     * RX2 data-rate.
     *
     * Generated from protobuf field <code>uint32 rx2_dr = 16;</code>
     */
    private $rx2_dr = 0;
    /**
     * RX2 frequency.
     *
     * Generated from protobuf field <code>uint32 rx2_frequency = 17;</code>
     */
    private $rx2_frequency = 0;
    /**
     * TXPowerIndex which the node is using. The possible values are defined
     * by the lorawan/band package and are region specific. By default it is
     * assumed that the node is using TXPower 0. This value is controlled by
     * the ADR engine.
     *
     * Generated from protobuf field <code>uint32 tx_power_index = 18;</code>
     */
    private $tx_power_index = 0;
    /**
     * DR defines the (last known) data-rate at which the node is operating.
     * This value is controlled by the ADR engine.
     *
     * Generated from protobuf field <code>uint32 dr = 19;</code>
     */
    private $dr = 0;
    /**
     * ADR defines if the device has ADR enabled.
     *
     * Generated from protobuf field <code>bool adr = 20;</code>
     */
    private $adr = false;
    /**
     * MaxSupportedTXPowerIndex defines the maximum supported tx-power index
     * by the node, or 0 when not set.
     *
     * Generated from protobuf field <code>uint32 max_supported_tx_power_index = 21;</code>
     */
    private $max_supported_tx_power_index = 0;
    /**
     * NbTrans defines the number of transmissions for each unconfirmed uplink
     * frame. In case of 0, the default value is used.
     * This value is controlled by the ADR engine.
     *
     * Generated from protobuf field <code>uint32 nb_trans = 23;</code>
     */
    private $nb_trans = 0;
    /**
     * Channels that are activated on the device.
     *
     * Generated from protobuf field <code>repeated uint32 enabled_uplink_channels = 24;</code>
     */
    private $enabled_uplink_channels;
    /**
     * Extra uplink channels, configured by the user.
     *
     * Generated from protobuf field <code>map<uint32, .storage.DeviceSessionPBChannel> extra_uplink_channels = 25;</code>
     */
    private $extra_uplink_channels;
    /**
     * Frequency of each channel.
     *
     * Generated from protobuf field <code>repeated uint32 channel_frequencies = 26;</code>
     */
    private $channel_frequencies;
    /**
     * Uplink history for ADR (last 20 uplink transmissions).
     *
     * Generated from protobuf field <code>repeated .storage.DeviceSessionPBUplinkADRHistory uplink_adr_history = 27;</code>
     */
    private $uplink_adr_history;
    /**
     * Last device-status requested timestamp (Unix ns)
     *
     * Generated from protobuf field <code>int64 last_device_status_request_time_unix_ns = 29;</code>
     */
    private $last_device_status_request_time_unix_ns = 0;
    /**
     * Last downlink timestamp (Unix ns).
     *
     * Generated from protobuf field <code>int64 last_downlink_tx_timestamp_unix_ns = 32;</code>
     */
    private $last_downlink_tx_timestamp_unix_ns = 0;
    /**
     * Class-B beacon is locked.
     *
     * Generated from protobuf field <code>bool beacon_locked = 33;</code>
     */
    private $beacon_locked = false;
    /**
     * Class-B ping-slot nb.
     *
     * Generated from protobuf field <code>uint32 ping_slot_nb = 34;</code>
     */
    private $ping_slot_nb = 0;
    /**
     * Class-B ping-slot data-rate.
     *
     * Generated from protobuf field <code>uint32 ping_slot_dr = 35;</code>
     */
    private $ping_slot_dr = 0;
    /**
     * Class-B ping-slot tx frequency.
     *
     * Generated from protobuf field <code>uint32 ping_slot_frequency = 36;</code>
     */
    private $ping_slot_frequency = 0;
    /**
     * LoRaWAN mac-version.
     *
     * Generated from protobuf field <code>string mac_version = 37;</code>
     */
    private $mac_version = '';
    /**
     * MinSupportedTXPowerIndex defines the minimum supported tx-power index
     * by the node (default 0).
     *
     * Generated from protobuf field <code>uint32 min_supported_tx_power_index = 38;</code>
     */
    private $min_supported_tx_power_index = 0;
    /**
     * RejoinRequestEnabled defines if the rejoin-request is enabled on the
     * device.
     *
     * Generated from protobuf field <code>bool rejoin_request_enabled = 44;</code>
     */
    private $rejoin_request_enabled = false;
    /**
     * RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
     * the rejoin-request.
     *
     * Generated from protobuf field <code>uint32 rejoin_request_max_count_n = 40;</code>
     */
    private $rejoin_request_max_count_n = 0;
    /**
     * RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
     * for the rejoin-request.
     *
     * Generated from protobuf field <code>uint32 rejoin_request_max_time_n = 41;</code>
     */
    private $rejoin_request_max_time_n = 0;
    /**
     * Rejoin counter (RJCount0).
     * This counter is reset to 0 after each successful join-accept.
     *
     * Generated from protobuf field <code>uint32 rejoin_count_0 = 42;</code>
     */
    private $rejoin_count_0 = 0;
    /**
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     *
     * Generated from protobuf field <code>bytes pending_rejoin_device_session = 43;</code>
     */
    private $pending_rejoin_device_session = '';
    /**
     * Device reference altitude for geolocation.
     *
     * Generated from protobuf field <code>double reference_altitude = 46;</code>
     */
    private $reference_altitude = 0.0;
    /**
     * UplinkDwellTime.
     *
     * Generated from protobuf field <code>bool uplink_dwell_time_400ms = 47;</code>
     */
    private $uplink_dwell_time_400ms = false;
    /**
     * DownlinkDwellTime.
     *
     * Generated from protobuf field <code>bool downlink_dwell_time_400ms = 48;</code>
     */
    private $downlink_dwell_time_400ms = false;
    /**
     * Uplink max. EIRP index.
     *
     * Generated from protobuf field <code>uint32 uplink_max_eirp_index = 49;</code>
     */
    private $uplink_max_eirp_index = 0;
    /**
     * Mac-command error counter.
     *
     * Generated from protobuf field <code>map<uint32, uint32> mac_command_error_count = 50;</code>
     */
    private $mac_command_error_count;
    /**
     * Device is disabled.
     *
     * Generated from protobuf field <code>bool is_disabled = 51;</code>
     */
    private $is_disabled = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $device_profile_id
     *           ID of the device-profile.
     *     @type string $service_profile_id
     *           ID of the service-profile.
     *     @type string $routing_profile_id
     *           ID of the routing-profile.
     *     @type string $dev_addr
     *           Device address.
     *     @type string $dev_eui
     *           Device EUI.
     *     @type string $join_eui
     *           Join EUI.
     *     @type string $f_nwk_s_int_key
     *           FNwkSIntKey.
     *     @type string $s_nwk_s_int_key
     *           SNwkSIntKey.
     *     @type string $nwk_s_enc_key
     *           NwkSEncKey.
     *     @type \Common\KeyEnvelope $app_s_key_envelope
     *           AppSKeyEnvelope contains the (encrypted) AppSKey key-envelope.
     *     @type int $f_cnt_up
     *           Uplink frame-counter.
     *     @type int $n_f_cnt_down
     *           Downlink frame-counter (network-server).
     *     @type int $a_f_cnt_down
     *           Uplink frame-counter (application-server).
     *           Note: this frame-counter is managed by the application-server.
     *     @type int $conf_f_cnt
     *           Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or a_f_cnt_down).
     *     @type bool $skip_f_cnt_check
     *           Skip uplink frame-counter validation.
     *     @type int $rx_delay
     *           RX Delay.
     *     @type int $rx1_dr_offset
     *           RX1 data-rate offset.
     *     @type int $rx2_dr
     *           RX2 data-rate.
     *     @type int $rx2_frequency
     *           RX2 frequency.
     *     @type int $tx_power_index
     *           TXPowerIndex which the node is using. The possible values are defined
     *           by the lorawan/band package and are region specific. By default it is
     *           assumed that the node is using TXPower 0. This value is controlled by
     *           the ADR engine.
     *     @type int $dr
     *           DR defines the (last known) data-rate at which the node is operating.
     *           This value is controlled by the ADR engine.
     *     @type bool $adr
     *           ADR defines if the device has ADR enabled.
     *     @type int $max_supported_tx_power_index
     *           MaxSupportedTXPowerIndex defines the maximum supported tx-power index
     *           by the node, or 0 when not set.
     *     @type int $nb_trans
     *           NbTrans defines the number of transmissions for each unconfirmed uplink
     *           frame. In case of 0, the default value is used.
     *           This value is controlled by the ADR engine.
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $enabled_uplink_channels
     *           Channels that are activated on the device.
     *     @type array|\Google\Protobuf\Internal\MapField $extra_uplink_channels
     *           Extra uplink channels, configured by the user.
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $channel_frequencies
     *           Frequency of each channel.
     *     @type \Storage\DeviceSessionPBUplinkADRHistory[]|\Google\Protobuf\Internal\RepeatedField $uplink_adr_history
     *           Uplink history for ADR (last 20 uplink transmissions).
     *     @type int|string $last_device_status_request_time_unix_ns
     *           Last device-status requested timestamp (Unix ns)
     *     @type int|string $last_downlink_tx_timestamp_unix_ns
     *           Last downlink timestamp (Unix ns).
     *     @type bool $beacon_locked
     *           Class-B beacon is locked.
     *     @type int $ping_slot_nb
     *           Class-B ping-slot nb.
     *     @type int $ping_slot_dr
     *           Class-B ping-slot data-rate.
     *     @type int $ping_slot_frequency
     *           Class-B ping-slot tx frequency.
     *     @type string $mac_version
     *           LoRaWAN mac-version.
     *     @type int $min_supported_tx_power_index
     *           MinSupportedTXPowerIndex defines the minimum supported tx-power index
     *           by the node (default 0).
     *     @type bool $rejoin_request_enabled
     *           RejoinRequestEnabled defines if the rejoin-request is enabled on the
     *           device.
     *     @type int $rejoin_request_max_count_n
     *           RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
     *           the rejoin-request.
     *     @type int $rejoin_request_max_time_n
     *           RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
     *           for the rejoin-request.
     *     @type int $rejoin_count_0
     *           Rejoin counter (RJCount0).
     *           This counter is reset to 0 after each successful join-accept.
     *     @type string $pending_rejoin_device_session
     *           Pending rejoin device-session contains a device-session which has not
     *           yet been activated by the device (by sending a first uplink).
     *     @type float $reference_altitude
     *           Device reference altitude for geolocation.
     *     @type bool $uplink_dwell_time_400ms
     *           UplinkDwellTime.
     *     @type bool $downlink_dwell_time_400ms
     *           DownlinkDwellTime.
     *     @type int $uplink_max_eirp_index
     *           Uplink max. EIRP index.
     *     @type array|\Google\Protobuf\Internal\MapField $mac_command_error_count
     *           Mac-command error counter.
     *     @type bool $is_disabled
     *           Device is disabled.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\DeviceSession::initOnce();
        parent::__construct($data);
    }

    /**
     * ID of the device-profile.
     *
     * Generated from protobuf field <code>string device_profile_id = 1;</code>
     * @return string
     */
    public function getDeviceProfileId()
    {
        return $this->device_profile_id;
    }

    /**
     * ID of the device-profile.
     *
     * Generated from protobuf field <code>string device_profile_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceProfileId($var)
    {
        GPBUtil::checkString($var, True);
        $this->device_profile_id = $var;

        return $this;
    }

    /**
     * ID of the service-profile.
     *
     * Generated from protobuf field <code>string service_profile_id = 2;</code>
     * @return string
     */
    public function getServiceProfileId()
    {
        return $this->service_profile_id;
    }

    /**
     * ID of the service-profile.
     *
     * Generated from protobuf field <code>string service_profile_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setServiceProfileId($var)
    {
        GPBUtil::checkString($var, True);
        $this->service_profile_id = $var;

        return $this;
    }

    /**
     * ID of the routing-profile.
     *
     * Generated from protobuf field <code>string routing_profile_id = 3;</code>
     * @return string
     */
    public function getRoutingProfileId()
    {
        return $this->routing_profile_id;
    }

    /**
     * ID of the routing-profile.
     *
     * Generated from protobuf field <code>string routing_profile_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setRoutingProfileId($var)
    {
        GPBUtil::checkString($var, True);
        $this->routing_profile_id = $var;

        return $this;
    }

    /**
     * Device address.
     *
     * Generated from protobuf field <code>bytes dev_addr = 4;</code>
     * @return string
     */
    public function getDevAddr()
    {
        return $this->dev_addr;
    }

    /**
     * Device address.
     *
     * Generated from protobuf field <code>bytes dev_addr = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setDevAddr($var)
    {
        GPBUtil::checkString($var, False);
        $this->dev_addr = $var;

        return $this;
    }

    /**
     * Device EUI.
     *
     * Generated from protobuf field <code>bytes dev_eui = 5;</code>
     * @return string
     */
    public function getDevEui()
    {
        return $this->dev_eui;
    }

    /**
     * Device EUI.
     *
     * Generated from protobuf field <code>bytes dev_eui = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setDevEui($var)
    {
        GPBUtil::checkString($var, False);
        $this->dev_eui = $var;

        return $this;
    }

    /**
     * Join EUI.
     *
     * Generated from protobuf field <code>bytes join_eui = 6;</code>
     * @return string
     */
    public function getJoinEui()
    {
        return $this->join_eui;
    }

    /**
     * Join EUI.
     *
     * Generated from protobuf field <code>bytes join_eui = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setJoinEui($var)
    {
        GPBUtil::checkString($var, False);
        $this->join_eui = $var;

        return $this;
    }

    /**
     * FNwkSIntKey.
     *
     * Generated from protobuf field <code>bytes f_nwk_s_int_key = 7;</code>
     * @return string
     */
    public function getFNwkSIntKey()
    {
        return $this->f_nwk_s_int_key;
    }

    /**
     * FNwkSIntKey.
     *
     * Generated from protobuf field <code>bytes f_nwk_s_int_key = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setFNwkSIntKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->f_nwk_s_int_key = $var;

        return $this;
    }

    /**
     * SNwkSIntKey.
     *
     * Generated from protobuf field <code>bytes s_nwk_s_int_key = 8;</code>
     * @return string
     */
    public function getSNwkSIntKey()
    {
        return $this->s_nwk_s_int_key;
    }

    /**
     * SNwkSIntKey.
     *
     * Generated from protobuf field <code>bytes s_nwk_s_int_key = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setSNwkSIntKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->s_nwk_s_int_key = $var;

        return $this;
    }

    /**
     * NwkSEncKey.
     *
     * Generated from protobuf field <code>bytes nwk_s_enc_key = 9;</code>
     * @return string
     */
    public function getNwkSEncKey()
    {
        return $this->nwk_s_enc_key;
    }

    /**
     * NwkSEncKey.
     *
     * Generated from protobuf field <code>bytes nwk_s_enc_key = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setNwkSEncKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->nwk_s_enc_key = $var;

        return $this;
    }

    /**
     * AppSKeyEnvelope contains the (encrypted) AppSKey key-envelope.
     *
     * Generated from protobuf field <code>.common.KeyEnvelope app_s_key_envelope = 45;</code>
     * @return \Common\KeyEnvelope
     */
    public function getAppSKeyEnvelope()
    {
        return $this->app_s_key_envelope;
    }

    /**
     * AppSKeyEnvelope contains the (encrypted) AppSKey key-envelope.
     *
     * Generated from protobuf field <code>.common.KeyEnvelope app_s_key_envelope = 45;</code>
     * @param \Common\KeyEnvelope $var
     * @return $this
     */
    public function setAppSKeyEnvelope($var)
    {
        GPBUtil::checkMessage($var, \Common\KeyEnvelope::class);
        $this->app_s_key_envelope = $var;

        return $this;
    }

    /**
     * Uplink frame-counter.
     *
     * Generated from protobuf field <code>uint32 f_cnt_up = 10;</code>
     * @return int
     */
    public function getFCntUp()
    {
        return $this->f_cnt_up;
    }

    /**
     * Uplink frame-counter.
     *
     * Generated from protobuf field <code>uint32 f_cnt_up = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setFCntUp($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_cnt_up = $var;

        return $this;
    }

    /**
     * Downlink frame-counter (network-server).
     *
     * Generated from protobuf field <code>uint32 n_f_cnt_down = 11;</code>
     * @return int
     */
    public function getNFCntDown()
    {
        return $this->n_f_cnt_down;
    }

    /**
     * Downlink frame-counter (network-server).
     *
     * Generated from protobuf field <code>uint32 n_f_cnt_down = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setNFCntDown($var)
    {
        GPBUtil::checkUint32($var);
        $this->n_f_cnt_down = $var;

        return $this;
    }

    /**
     * Uplink frame-counter (application-server).
     * Note: this frame-counter is managed by the application-server.
     *
     * Generated from protobuf field <code>uint32 a_f_cnt_down = 12;</code>
     * @return int
     */
    public function getAFCntDown()
    {
        return $this->a_f_cnt_down;
    }

    /**
     * Uplink frame-counter (application-server).
     * Note: this frame-counter is managed by the application-server.
     *
     * Generated from protobuf field <code>uint32 a_f_cnt_down = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setAFCntDown($var)
    {
        GPBUtil::checkUint32($var);
        $this->a_f_cnt_down = $var;

        return $this;
    }

    /**
     * Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or a_f_cnt_down).
     *
     * Generated from protobuf field <code>uint32 conf_f_cnt = 39;</code>
     * @return int
     */
    public function getConfFCnt()
    {
        return $this->conf_f_cnt;
    }

    /**
     * Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or a_f_cnt_down).
     *
     * Generated from protobuf field <code>uint32 conf_f_cnt = 39;</code>
     * @param int $var
     * @return $this
     */
    public function setConfFCnt($var)
    {
        GPBUtil::checkUint32($var);
        $this->conf_f_cnt = $var;

        return $this;
    }

    /**
     * Skip uplink frame-counter validation.
     *
     * Generated from protobuf field <code>bool skip_f_cnt_check = 13;</code>
     * @return bool
     */
    public function getSkipFCntCheck()
    {
        return $this->skip_f_cnt_check;
    }

    /**
     * Skip uplink frame-counter validation.
     *
     * Generated from protobuf field <code>bool skip_f_cnt_check = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setSkipFCntCheck($var)
    {
        GPBUtil::checkBool($var);
        $this->skip_f_cnt_check = $var;

        return $this;
    }

    /**
     * RX Delay.
     *
     * Generated from protobuf field <code>uint32 rx_delay = 14;</code>
     * @return int
     */
    public function getRxDelay()
    {
        return $this->rx_delay;
    }

    /**
     * RX Delay.
     *
     * Generated from protobuf field <code>uint32 rx_delay = 14;</code>
     * @param int $var
     * @return $this
     */
    public function setRxDelay($var)
    {
        GPBUtil::checkUint32($var);
        $this->rx_delay = $var;

        return $this;
    }

    /**
     * RX1 data-rate offset.
     *
     * Generated from protobuf field <code>uint32 rx1_dr_offset = 15;</code>
     * @return int
     */
    public function getRx1DrOffset()
    {
        return $this->rx1_dr_offset;
    }

    /**
     * RX1 data-rate offset.
     *
     * Generated from protobuf field <code>uint32 rx1_dr_offset = 15;</code>
     * @param int $var
     * @return $this
     */
    public function setRx1DrOffset($var)
    {
        GPBUtil::checkUint32($var);
        $this->rx1_dr_offset = $var;

        return $this;
    }

    /**
     * RX2 data-rate.
     *
     * Generated from protobuf field <code>uint32 rx2_dr = 16;</code>
     * @return int
     */
    public function getRx2Dr()
    {
        return $this->rx2_dr;
    }

    /**
     * RX2 data-rate.
     *
     * Generated from protobuf field <code>uint32 rx2_dr = 16;</code>
     * @param int $var
     * @return $this
     */
    public function setRx2Dr($var)
    {
        GPBUtil::checkUint32($var);
        $this->rx2_dr = $var;

        return $this;
    }

    /**
     * RX2 frequency.
     *
     * Generated from protobuf field <code>uint32 rx2_frequency = 17;</code>
     * @return int
     */
    public function getRx2Frequency()
    {
        return $this->rx2_frequency;
    }

    /**
     * RX2 frequency.
     *
     * Generated from protobuf field <code>uint32 rx2_frequency = 17;</code>
     * @param int $var
     * @return $this
     */
    public function setRx2Frequency($var)
    {
        GPBUtil::checkUint32($var);
        $this->rx2_frequency = $var;

        return $this;
    }

    /**
     * TXPowerIndex which the node is using. The possible values are defined
     * by the lorawan/band package and are region specific. By default it is
     * assumed that the node is using TXPower 0. This value is controlled by
     * the ADR engine.
     *
     * Generated from protobuf field <code>uint32 tx_power_index = 18;</code>
     * @return int
     */
    public function getTxPowerIndex()
    {
        return $this->tx_power_index;
    }

    /**
     * TXPowerIndex which the node is using. The possible values are defined
     * by the lorawan/band package and are region specific. By default it is
     * assumed that the node is using TXPower 0. This value is controlled by
     * the ADR engine.
     *
     * Generated from protobuf field <code>uint32 tx_power_index = 18;</code>
     * @param int $var
     * @return $this
     */
    public function setTxPowerIndex($var)
    {
        GPBUtil::checkUint32($var);
        $this->tx_power_index = $var;

        return $this;
    }

    /**
     * DR defines the (last known) data-rate at which the node is operating.
     * This value is controlled by the ADR engine.
     *
     * Generated from protobuf field <code>uint32 dr = 19;</code>
     * @return int
     */
    public function getDr()
    {
        return $this->dr;
    }

    /**
     * DR defines the (last known) data-rate at which the node is operating.
     * This value is controlled by the ADR engine.
     *
     * Generated from protobuf field <code>uint32 dr = 19;</code>
     * @param int $var
     * @return $this
     */
    public function setDr($var)
    {
        GPBUtil::checkUint32($var);
        $this->dr = $var;

        return $this;
    }

    /**
     * ADR defines if the device has ADR enabled.
     *
     * Generated from protobuf field <code>bool adr = 20;</code>
     * @return bool
     */
    public function getAdr()
    {
        return $this->adr;
    }

    /**
     * ADR defines if the device has ADR enabled.
     *
     * Generated from protobuf field <code>bool adr = 20;</code>
     * @param bool $var
     * @return $this
     */
    public function setAdr($var)
    {
        GPBUtil::checkBool($var);
        $this->adr = $var;

        return $this;
    }

    /**
     * MaxSupportedTXPowerIndex defines the maximum supported tx-power index
     * by the node, or 0 when not set.
     *
     * Generated from protobuf field <code>uint32 max_supported_tx_power_index = 21;</code>
     * @return int
     */
    public function getMaxSupportedTxPowerIndex()
    {
        return $this->max_supported_tx_power_index;
    }

    /**
     * MaxSupportedTXPowerIndex defines the maximum supported tx-power index
     * by the node, or 0 when not set.
     *
     * Generated from protobuf field <code>uint32 max_supported_tx_power_index = 21;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxSupportedTxPowerIndex($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_supported_tx_power_index = $var;

        return $this;
    }

    /**
     * NbTrans defines the number of transmissions for each unconfirmed uplink
     * frame. In case of 0, the default value is used.
     * This value is controlled by the ADR engine.
     *
     * Generated from protobuf field <code>uint32 nb_trans = 23;</code>
     * @return int
     */
    public function getNbTrans()
    {
        return $this->nb_trans;
    }

    /**
     * NbTrans defines the number of transmissions for each unconfirmed uplink
     * frame. In case of 0, the default value is used.
     * This value is controlled by the ADR engine.
     *
     * Generated from protobuf field <code>uint32 nb_trans = 23;</code>
     * @param int $var
     * @return $this
     */
    public function setNbTrans($var)
    {
        GPBUtil::checkUint32($var);
        $this->nb_trans = $var;

        return $this;
    }

    /**
     * Channels that are activated on the device.
     *
     * Generated from protobuf field <code>repeated uint32 enabled_uplink_channels = 24;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getEnabledUplinkChannels()
    {
        return $this->enabled_uplink_channels;
    }

    /**
     * Channels that are activated on the device.
     *
     * Generated from protobuf field <code>repeated uint32 enabled_uplink_channels = 24;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setEnabledUplinkChannels($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::UINT32);
        $this->enabled_uplink_channels = $arr;

        return $this;
    }

    /**
     * Extra uplink channels, configured by the user.
     *
     * Generated from protobuf field <code>map<uint32, .storage.DeviceSessionPBChannel> extra_uplink_channels = 25;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getExtraUplinkChannels()
    {
        return $this->extra_uplink_channels;
    }

    /**
     * Extra uplink channels, configured by the user.
     *
     * Generated from protobuf field <code>map<uint32, .storage.DeviceSessionPBChannel> extra_uplink_channels = 25;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setExtraUplinkChannels($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::UINT32, \Google\Protobuf\Internal\GPBType::MESSAGE, \Storage\DeviceSessionPBChannel::class);
        $this->extra_uplink_channels = $arr;

        return $this;
    }

    /**
     * Frequency of each channel.
     *
     * Generated from protobuf field <code>repeated uint32 channel_frequencies = 26;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getChannelFrequencies()
    {
        return $this->channel_frequencies;
    }

    /**
     * Frequency of each channel.
     *
     * Generated from protobuf field <code>repeated uint32 channel_frequencies = 26;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setChannelFrequencies($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::UINT32);
        $this->channel_frequencies = $arr;

        return $this;
    }

    /**
     * Uplink history for ADR (last 20 uplink transmissions).
     *
     * Generated from protobuf field <code>repeated .storage.DeviceSessionPBUplinkADRHistory uplink_adr_history = 27;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getUplinkAdrHistory()
    {
        return $this->uplink_adr_history;
    }

    /**
     * Uplink history for ADR (last 20 uplink transmissions).
     *
     * Generated from protobuf field <code>repeated .storage.DeviceSessionPBUplinkADRHistory uplink_adr_history = 27;</code>
     * @param \Storage\DeviceSessionPBUplinkADRHistory[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setUplinkAdrHistory($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Storage\DeviceSessionPBUplinkADRHistory::class);
        $this->uplink_adr_history = $arr;

        return $this;
    }

    /**
     * Last device-status requested timestamp (Unix ns)
     *
     * Generated from protobuf field <code>int64 last_device_status_request_time_unix_ns = 29;</code>
     * @return int|string
     */
    public function getLastDeviceStatusRequestTimeUnixNs()
    {
        return $this->last_device_status_request_time_unix_ns;
    }

    /**
     * Last device-status requested timestamp (Unix ns)
     *
     * Generated from protobuf field <code>int64 last_device_status_request_time_unix_ns = 29;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLastDeviceStatusRequestTimeUnixNs($var)
    {
        GPBUtil::checkInt64($var);
        $this->last_device_status_request_time_unix_ns = $var;

        return $this;
    }

    /**
     * Last downlink timestamp (Unix ns).
     *
     * Generated from protobuf field <code>int64 last_downlink_tx_timestamp_unix_ns = 32;</code>
     * @return int|string
     */
    public function getLastDownlinkTxTimestampUnixNs()
    {
        return $this->last_downlink_tx_timestamp_unix_ns;
    }

    /**
     * Last downlink timestamp (Unix ns).
     *
     * Generated from protobuf field <code>int64 last_downlink_tx_timestamp_unix_ns = 32;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLastDownlinkTxTimestampUnixNs($var)
    {
        GPBUtil::checkInt64($var);
        $this->last_downlink_tx_timestamp_unix_ns = $var;

        return $this;
    }

    /**
     * Class-B beacon is locked.
     *
     * Generated from protobuf field <code>bool beacon_locked = 33;</code>
     * @return bool
     */
    public function getBeaconLocked()
    {
        return $this->beacon_locked;
    }

    /**
     * Class-B beacon is locked.
     *
     * Generated from protobuf field <code>bool beacon_locked = 33;</code>
     * @param bool $var
     * @return $this
     */
    public function setBeaconLocked($var)
    {
        GPBUtil::checkBool($var);
        $this->beacon_locked = $var;

        return $this;
    }

    /**
     * Class-B ping-slot nb.
     *
     * Generated from protobuf field <code>uint32 ping_slot_nb = 34;</code>
     * @return int
     */
    public function getPingSlotNb()
    {
        return $this->ping_slot_nb;
    }

    /**
     * Class-B ping-slot nb.
     *
     * Generated from protobuf field <code>uint32 ping_slot_nb = 34;</code>
     * @param int $var
     * @return $this
     */
    public function setPingSlotNb($var)
    {
        GPBUtil::checkUint32($var);
        $this->ping_slot_nb = $var;

        return $this;
    }

    /**
     * Class-B ping-slot data-rate.
     *
     * Generated from protobuf field <code>uint32 ping_slot_dr = 35;</code>
     * @return int
     */
    public function getPingSlotDr()
    {
        return $this->ping_slot_dr;
    }

    /**
     * Class-B ping-slot data-rate.
     *
     * Generated from protobuf field <code>uint32 ping_slot_dr = 35;</code>
     * @param int $var
     * @return $this
     */
    public function setPingSlotDr($var)
    {
        GPBUtil::checkUint32($var);
        $this->ping_slot_dr = $var;

        return $this;
    }

    /**
     * Class-B ping-slot tx frequency.
     *
     * Generated from protobuf field <code>uint32 ping_slot_frequency = 36;</code>
     * @return int
     */
    public function getPingSlotFrequency()
    {
        return $this->ping_slot_frequency;
    }

    /**
     * Class-B ping-slot tx frequency.
     *
     * Generated from protobuf field <code>uint32 ping_slot_frequency = 36;</code>
     * @param int $var
     * @return $this
     */
    public function setPingSlotFrequency($var)
    {
        GPBUtil::checkUint32($var);
        $this->ping_slot_frequency = $var;

        return $this;
    }

    /**
     * LoRaWAN mac-version.
     *
     * Generated from protobuf field <code>string mac_version = 37;</code>
     * @return string
     */
    public function getMacVersion()
    {
        return $this->mac_version;
    }

    /**
     * LoRaWAN mac-version.
     *
     * Generated from protobuf field <code>string mac_version = 37;</code>
     * @param string $var
     * @return $this
     */
    public function setMacVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->mac_version = $var;

        return $this;
    }

    /**
     * MinSupportedTXPowerIndex defines the minimum supported tx-power index
     * by the node (default 0).
     *
     * Generated from protobuf field <code>uint32 min_supported_tx_power_index = 38;</code>
     * @return int
     */
    public function getMinSupportedTxPowerIndex()
    {
        return $this->min_supported_tx_power_index;
    }

    /**
     * MinSupportedTXPowerIndex defines the minimum supported tx-power index
     * by the node (default 0).
     *
     * Generated from protobuf field <code>uint32 min_supported_tx_power_index = 38;</code>
     * @param int $var
     * @return $this
     */
    public function setMinSupportedTxPowerIndex($var)
    {
        GPBUtil::checkUint32($var);
        $this->min_supported_tx_power_index = $var;

        return $this;
    }

    /**
     * RejoinRequestEnabled defines if the rejoin-request is enabled on the
     * device.
     *
     * Generated from protobuf field <code>bool rejoin_request_enabled = 44;</code>
     * @return bool
     */
    public function getRejoinRequestEnabled()
    {
        return $this->rejoin_request_enabled;
    }

    /**
     * RejoinRequestEnabled defines if the rejoin-request is enabled on the
     * device.
     *
     * Generated from protobuf field <code>bool rejoin_request_enabled = 44;</code>
     * @param bool $var
     * @return $this
     */
    public function setRejoinRequestEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->rejoin_request_enabled = $var;

        return $this;
    }

    /**
     * RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
     * the rejoin-request.
     *
     * Generated from protobuf field <code>uint32 rejoin_request_max_count_n = 40;</code>
     * @return int
     */
    public function getRejoinRequestMaxCountN()
    {
        return $this->rejoin_request_max_count_n;
    }

    /**
     * RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
     * the rejoin-request.
     *
     * Generated from protobuf field <code>uint32 rejoin_request_max_count_n = 40;</code>
     * @param int $var
     * @return $this
     */
    public function setRejoinRequestMaxCountN($var)
    {
        GPBUtil::checkUint32($var);
        $this->rejoin_request_max_count_n = $var;

        return $this;
    }

    /**
     * RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
     * for the rejoin-request.
     *
     * Generated from protobuf field <code>uint32 rejoin_request_max_time_n = 41;</code>
     * @return int
     */
    public function getRejoinRequestMaxTimeN()
    {
        return $this->rejoin_request_max_time_n;
    }

    /**
     * RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
     * for the rejoin-request.
     *
     * Generated from protobuf field <code>uint32 rejoin_request_max_time_n = 41;</code>
     * @param int $var
     * @return $this
     */
    public function setRejoinRequestMaxTimeN($var)
    {
        GPBUtil::checkUint32($var);
        $this->rejoin_request_max_time_n = $var;

        return $this;
    }

    /**
     * Rejoin counter (RJCount0).
     * This counter is reset to 0 after each successful join-accept.
     *
     * Generated from protobuf field <code>uint32 rejoin_count_0 = 42;</code>
     * @return int
     */
    public function getRejoinCount0()
    {
        return $this->rejoin_count_0;
    }

    /**
     * Rejoin counter (RJCount0).
     * This counter is reset to 0 after each successful join-accept.
     *
     * Generated from protobuf field <code>uint32 rejoin_count_0 = 42;</code>
     * @param int $var
     * @return $this
     */
    public function setRejoinCount0($var)
    {
        GPBUtil::checkUint32($var);
        $this->rejoin_count_0 = $var;

        return $this;
    }

    /**
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     *
     * Generated from protobuf field <code>bytes pending_rejoin_device_session = 43;</code>
     * @return string
     */
    public function getPendingRejoinDeviceSession()
    {
        return $this->pending_rejoin_device_session;
    }

    /**
     * Pending rejoin device-session contains a device-session which has not
     * yet been activated by the device (by sending a first uplink).
     *
     * Generated from protobuf field <code>bytes pending_rejoin_device_session = 43;</code>
     * @param string $var
     * @return $this
     */
    public function setPendingRejoinDeviceSession($var)
    {
        GPBUtil::checkString($var, False);
        $this->pending_rejoin_device_session = $var;

        return $this;
    }

    /**
     * Device reference altitude for geolocation.
     *
     * Generated from protobuf field <code>double reference_altitude = 46;</code>
     * @return float
     */
    public function getReferenceAltitude()
    {
        return $this->reference_altitude;
    }

    /**
     * Device reference altitude for geolocation.
     *
     * Generated from protobuf field <code>double reference_altitude = 46;</code>
     * @param float $var
     * @return $this
     */
    public function setReferenceAltitude($var)
    {
        GPBUtil::checkDouble($var);
        $this->reference_altitude = $var;

        return $this;
    }

    /**
     * UplinkDwellTime.
     *
     * Generated from protobuf field <code>bool uplink_dwell_time_400ms = 47;</code>
     * @return bool
     */
    public function getUplinkDwellTime400Ms()
    {
        return $this->uplink_dwell_time_400ms;
    }

    /**
     * UplinkDwellTime.
     *
     * Generated from protobuf field <code>bool uplink_dwell_time_400ms = 47;</code>
     * @param bool $var
     * @return $this
     */
    public function setUplinkDwellTime400Ms($var)
    {
        GPBUtil::checkBool($var);
        $this->uplink_dwell_time_400ms = $var;

        return $this;
    }

    /**
     * DownlinkDwellTime.
     *
     * Generated from protobuf field <code>bool downlink_dwell_time_400ms = 48;</code>
     * @return bool
     */
    public function getDownlinkDwellTime400Ms()
    {
        return $this->downlink_dwell_time_400ms;
    }

    /**
     * DownlinkDwellTime.
     *
     * Generated from protobuf field <code>bool downlink_dwell_time_400ms = 48;</code>
     * @param bool $var
     * @return $this
     */
    public function setDownlinkDwellTime400Ms($var)
    {
        GPBUtil::checkBool($var);
        $this->downlink_dwell_time_400ms = $var;

        return $this;
    }

    /**
     * Uplink max. EIRP index.
     *
     * Generated from protobuf field <code>uint32 uplink_max_eirp_index = 49;</code>
     * @return int
     */
    public function getUplinkMaxEirpIndex()
    {
        return $this->uplink_max_eirp_index;
    }

    /**
     * Uplink max. EIRP index.
     *
     * Generated from protobuf field <code>uint32 uplink_max_eirp_index = 49;</code>
     * @param int $var
     * @return $this
     */
    public function setUplinkMaxEirpIndex($var)
    {
        GPBUtil::checkUint32($var);
        $this->uplink_max_eirp_index = $var;

        return $this;
    }

    /**
     * Mac-command error counter.
     *
     * Generated from protobuf field <code>map<uint32, uint32> mac_command_error_count = 50;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getMacCommandErrorCount()
    {
        return $this->mac_command_error_count;
    }

    /**
     * Mac-command error counter.
     *
     * Generated from protobuf field <code>map<uint32, uint32> mac_command_error_count = 50;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setMacCommandErrorCount($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::UINT32, \Google\Protobuf\Internal\GPBType::UINT32);
        $this->mac_command_error_count = $arr;

        return $this;
    }

    /**
     * Device is disabled.
     *
     * Generated from protobuf field <code>bool is_disabled = 51;</code>
     * @return bool
     */
    public function getIsDisabled()
    {
        return $this->is_disabled;
    }

    /**
     * Device is disabled.
     *
     * Generated from protobuf field <code>bool is_disabled = 51;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsDisabled($var)
    {
        GPBUtil::checkBool($var);
        $this->is_disabled = $var;

        return $this;
    }

}

